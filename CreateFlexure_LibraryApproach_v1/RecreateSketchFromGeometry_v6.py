'''
Author: William J. Reid
Description: Recreates a hard-coded sketch profile, scales it to match the user-selected extruded-cut circle diameter, and centers 
the sketch onto the extruded-cut circular profile selecteed. Preliminary ability for user to create a tight fit (interference), normal fit (transition), or clearance fit (loose).
The hard-coded skech profile is extracted from the output of ExtractSketchProfilev3.py script. 
'''

import adsk.core, adsk.fusion, adsk.cam, traceback, math

def addScaledSketchEntities(sketch, entities, offsetX, offsetY, scaleFactor):
    lines = sketch.sketchCurves.sketchLines
    arcs = sketch.sketchCurves.sketchArcs
    circles = sketch.sketchCurves.sketchCircles

    for entity in entities:
        entity_type, params = entity
        if entity_type == 'line':
            [(p1, p2)] = params
            lines.addByTwoPoints(
                adsk.core.Point3D.create((p1[0] * scaleFactor) + offsetX, (p1[1] * scaleFactor) + offsetY, p1[2]),
                adsk.core.Point3D.create((p2[0] * scaleFactor) + offsetX, (p2[1] * scaleFactor) + offsetY, p2[2])
            )
        elif entity_type == 'arc':
            [(center, start, sweep)] = params
            radius = math.dist(center, start) * scaleFactor
            angle = math.atan2(start[1] - center[1], start[0] - center[0])
            scaled_center = adsk.core.Point3D.create(center[0] * scaleFactor + offsetX, center[1] * scaleFactor + offsetY, center[2])
            scaled_start = adsk.core.Point3D.create(
                scaled_center.x + math.cos(angle) * radius,
                scaled_center.y + math.sin(angle) * radius,
                start[2]
            )
            arcs.addByCenterStartSweep(scaled_center, scaled_start, sweep)
        elif entity_type == 'circle':
            [(center, radius)] = params
            circles.addByCenterRadius(
                adsk.core.Point3D.create((center[0] * scaleFactor) + offsetX, (center[1] * scaleFactor) + offsetY, center[2]),
                radius * scaleFactor
            )

def scaleArc(arc, scaleFactor, centerPoint):
    """ Scales an arc's radius and repositions its center, start, and end points. """
    # Calculate new center, start, and end points
    newCenter = arc.center.copy()
    newCenter.x = (newCenter.x - centerPoint.x) * scaleFactor + centerPoint.x
    newCenter.y = (newCenter.y - centerPoint.y) * scaleFactor + centerPoint.y
    newStart = arc.startPoint.copy()
    newStart.x = (newStart.x - centerPoint.x) * scaleFactor + centerPoint.x
    newStart.y = (newStart.y - centerPoint.y) * scaleFactor + centerPoint.y
    newEnd = arc.endPoint.copy()
    newEnd.x = (newEnd.x - centerPoint.x) * scaleFactor + centerPoint.x
    newEnd.y = (newEnd.y - centerPoint.y) * scaleFactor + centerPoint.y

    # Move the arc's center, start, and end sketch points
    arc.centerSketchPoint.move(adsk.core.Vector3D.create(newCenter.x - arc.center.x, newCenter.y - arc.center.y, 0))
    arc.startSketchPoint.move(adsk.core.Vector3D.create(newStart.x - arc.startPoint.x, newStart.y - arc.startPoint.y, 0))
    arc.endSketchPoint.move(adsk.core.Vector3D.create(newEnd.x - arc.endPoint.x, newEnd.y - arc.endPoint.y, 0))

    # Scale the radius
    arc.radius *= scaleFactor

def calculateScaleFactor(selectedEdge, standardDiameter):
    selectedDiameter = selectedEdge.geometry.radius
    return selectedDiameter / standardDiameter     
            
# Profiles defined as lists of entities with parameters. NOTE: These are extracted from the output of ExtractSketchFromEdgev3.py.
# Circular Flexure 1:
profile_1_entities = [
    ('line', [((1.2494080302136261, -0.2530324324719002, 0.0), (0.9674577965561877, -0.2530324324719002, 0.0))]),
    ('arc', [((-1.5439038936193583e-16, -1.5265566588595902e-16, 0.0), (1.0000000000000009, 1.3877787807814457e-16, 0.0), 6.027371896796864)]),
    ('arc', [((1.075000000000001, -0.0006149051189012211, 0.0), (1.0000000000000009, 1.3877787807814457e-16, 0.0), 3.1579897560334134)]),
    ('arc', [((0.0, 0.0, 0.0), (1.1500000000000021, 7.24247051220317e-17, 0.0), 2.7436903559136656)]),
    ('arc', [((-1.1526422635884934, 0.4844817440387874, 0.0), (-1.2490589427729168, 0.5122028479800905, 0.0), 3.0236527152676786)]),
    ('arc', [((1.1102230246251565e-16, 0.0, 0.0), (1.3386514609431721, -0.1746776062198933, 0.0), 2.882189252852549)]),
    ('arc', [((1.2494080302136261, -0.1630324324718983, 0.0), (1.2494080302136261, -0.2530324324719002, 0.0), 1.4410417167180833)])
]

profile_2_entities = [
    ('arc', [((0.24282679737437718, -1.1751745174555575, 0.0), (0.4118152602072076, -1.0682030285933521, 0.0), 1.210220058493101)]),
    ('arc', [((0.0, 3.552713678800501e-15, 0.0), (-0.20235566447863854, -0.9793120978796335, 0.0), 0.4075255066923056)]),
    ('arc', [((-0.2428267973743667, -1.1751745174555601, 0.0), (-0.20235566447863854, -0.9793120978796335, 0.0), 1.2102200584930949)]),
    ('arc', [((-0.7497921858728598, -0.8542600508689449, 0.0), (-1.0136550613005706, -1.1548867013359654, 0.0), 1.7268198455300467)]),
    ('arc', [((2.220446049250313e-15, 8.992806499463768e-15, 0.0), (-0.9985190145316355, 1.167998139485566, 0.0), 1.713899499579518)]),
    ('arc', [((-0.9335383055107792, 1.0919882226644906, 0.0), (-0.8560413585054538, 1.1551880897913587, 0.0), 1.5939974002165846)]),
    ('line', [((-0.8560413585054538, 1.1551880897913587, 0.0), (-0.8041864823516549, 1.0916025986827826, 0.0))]),
    ('arc', [((-0.8735039664246798, 1.035073200399739, 0.0), (-0.8158169935873945, 0.9667160527608318, 0.0), 1.5539806322450322)]),
    ('arc', [((2.173574380481824e-15, 8.788040859464274e-15, 0.0), (-0.8158169935873945, 0.9667160527608318, 0.0), 1.4339701015339086)]),
    ('arc', [((-0.9428755400430393, -0.6301934528767331, 0.0), (-1.0689582038215373, -0.6763325011960175, 0.0), 3.3326374476121625)]),
    ('arc', [((0.0, -2.7755575615628914e-17, 0.0), (0.9347438288030558, -0.3553223529622128, 0.0), 4.100387675984592)]),
    ('arc', [((1.062194501722192, -0.39740539753378884, 0.0), (0.9347438288030558, -0.3553223529622128, 0.0), 3.119931942715165)]),
    ('arc', [((2.173574380481824e-15, 8.788040859464274e-15, 0.0), (1.1887037993675844, -0.44223902639899737, 0.0), 1.2273207739780094)]),
    ('arc', [((0.8743156529759705, 1.038774523577089, 0.0), (0.80554702633536, 1.095970349110266, 0.0), 1.5649341839123634)]),
    ('line', [((0.80554702633536, 1.095970349110266, 0.0), (0.855932377506641, 1.1565504940868263, 0.0))]),
    ('arc', [((0.9328157019040177, 1.0926055612961212, 0.0), (0.9977461127266836, 1.1686584491466154, 0.0), 1.583683587153986)]),
    ('arc', [((3.774758283725532e-15, 8.770761894538737e-15, 0.0), (1.013655061300581, -1.1548867013359603, 0.0), 1.7145610446097328)]),
    ('arc', [((0.7497921858728687, -0.8542600508689402, 0.0), (0.4118152602072076, -1.0682030285933521, 0.0), 1.726819845530045)]),
]

# BYU CMR BYUCMR_1012603 Ortho-Planar Spring. Link to model: https://www.printables.com/model/596315-ortho-planar-spring
profile_3_entities = [
    ('line', [((-6.265351877706298, -1.2210343694479402, 0.0), (-2.256028704301345, 4.834354190942541, 0.0))]),
    ('arc', [((-2.0892700771953963, 4.723941920934753, 0.0), (-1.9225114524162121, 4.61352964741279, 0.0), 3.141592653589793)]),
    ('line', [((-1.922511452416212, 4.613529647412791, 0.0), (-5.599240163575474, -0.9395325567964026, 0.0))]),
    ('arc', [((-5.432481538885704, -1.0499448302961025, 0.0), (-5.599240163575474, -0.9395325567964022, 0.0), 1.5707963267948968)]),
    ('line', [((-5.542893812385404, -1.2167034549858726, 0.0), (-5.042617937802252, -1.547940276328022, 0.0))]),
    ('arc', [((-4.932205664302553, -1.3811816516382507, 0.0), (-5.042617937802252, -1.547940276328022, 0.0), 1.5707963267948954)]),
    ('line', [((-4.765447039612782, -1.491593925137949, 0.0), (-1.0501310280540923, 4.119747717871052, 0.0))]),
    ('arc', [((-0.7999930909186993, 3.954129307453999, 0.0), (-0.49999568182418536, 3.954129307454002, 0.0), 2.55675246821543)]),
    ('line', [((-0.49999568182418536, 3.954129307454002, 0.0), (-0.5044057926436608, 2.092378729983172, 0.0))]),
    ('arc', [((-0.7216333491621711, 2.0983342529517293, 0.0), (-0.6569468481155115, 1.8908759772740111, 0.0), 1.2411356771439301)]),
    ('arc', [((-0.015526420367374087, -0.018911184783890412, 0.0), (-0.6569468481155113, 1.8908759772740116, 0.0), 1.4618380250357923)]),
    ('arc', [((-2.193290956580717, -0.46494827831482133, 0.0), (-2.0609445901811543, -0.6282144842435663, 0.0), 0.9662758355780897)]),
    ('line', [((-2.060944590181154, -0.6282144842435662, 0.0), (-4.333148818079964, -1.882345324263505, 0.0))]),
    ('arc', [((-4.236336331772661, -2.057350043325488, 0.0), (-4.333148818079964, -1.882345324263505, 0.0), 1.5707963273747172)]),
    ('line', [((-4.41134105077851, -2.1541625297342635, 0.0), (-3.9043543773315115, -3.0706255187692744, 0.0))]),
    ('arc', [((-3.7293496584756647, -2.973813033165222, 0.0), (-3.904354377331511, -3.0706255187692744, 0.0), 0.989046183847823)]),
    ('line', [((-3.744625431501045, -3.173227074168171, 0.0), (3.1108280322455264, -3.6983774017268076, 0.0))]),
    ('arc', [((3.0955522594913285, -3.8977914430118075, 0.0), (3.0802764867371315, -4.097205484296807, 0.0), 3.141592653589793)]),
    ('line', [((3.0802764867371315, -4.097205484296807, 0.0), (-4.03539614433892, -3.5518868026862584, 0.0))]),
    ('arc', [((-4.010494205662711, -3.3534448652208697, 0.0), (-4.149621953392134, -3.497120816258575, 0.0), 0.6444822567520844)]),
    ('line', [((-4.149621953392133, -3.4971208162585756, 0.0), (-6.2377210006787935, -1.4751225940970198, 0.0))]),
    ('arc', [((-6.098593252949369, -1.331446643059307, 0.0), (-6.265351877706299, -1.2210343694479402, 0.0), 1.386319507754715)]),
    ('line', [((-1.038934774834536, 5.313729624391899, 0.0), (1.9348786040456507, 6.110932987403883, 0.0))]),
    ('arc', [((1.9866645403182899, 5.9177555407409255, 0.0), (2.167003505251781, 6.004226153214592, 0.0), 1.3856077084835345)]),
    ('line', [((2.1670035052517806, 6.004226153214592, 0.0), (5.234110869405345, -0.39238596191685815, 0.0))]),
    ('arc', [((5.053771904471855, -0.47885657439052615, 0.0), (4.8734329395383655, -0.5653271868641943, 0.0), 3.1415926325163688)]),
    ('line', [((4.8734329395383655, -0.5653271868641941, 0.0), (1.9939615437159102, 5.43996034545461, 0.0))]),
    ('arc', [((1.8136225787824214, 5.353489732980943, 0.0), (1.9939615437159102, 5.43996034545461, 0.0), 1.570796326794913)]),
    ('line', [((1.727151966308753, 5.53382869791443, 0.0), (1.186135071761242, 5.274416860305623, 0.0))]),
    ('arc', [((1.27260568423491, 5.094077895372133, 0.0), (1.1861350717612429, 5.274416860305623, 0.0), 1.5707963267948994)]),
    ('line', [((1.0922667193014215, 5.007607282898465, 0.0), (4.0616932094964415, -1.1852862836541194, 0.0))]),
    ('arc', [((3.8125344393276315, -1.3047552595774805, 0.0), (3.6743742705377356, -1.5440556915038743, 0.0), 2.541499964531446)]),
    ('line', [((3.6743742705377347, -1.5440556915038741, 0.0), (2.0578140527918043, -0.6127716352343697, 0.0))]),
    ('arc', [((2.1578131891566406, -0.43956805033746305, 0.0), (1.9658278088400856, -0.38352411364881844, 0.0), 1.3312230260674665)]),
    ('arc', [((-0.015526420367374087, -0.018911184783890412, 0.0), (1.9658278088400853, -0.3835241136488188, 0.0), 1.4170953417143881)]),
    ('arc', [((0.7328492803348742, 2.1052600062061204, 0.0), (0.4955855710047106, 2.092378729983171, 0.0), 1.1519783866775823)]),
    ('line', [((0.49558557100471134, 2.0923787299831713, 0.0), (0.4999956818241896, 4.694122916553798, 0.0))]),
    ('arc', [((0.29999740909451894, 4.694122916553797, 0.0), (0.49999568182418974, 4.694122916553798, 0.0), 1.570796326794914)]),
    ('line', [((0.2999974090945146, 4.894121189283469, 0.0), (-0.7897641822599117, 4.894121189283471, 0.0))]),
    ('arc', [((-0.7897641822599104, 4.694122916553797, 0.0), (-0.7897641822599115, 4.89412118928347, 0.0), 0.9859561414205418)]),
    ('line', [((-0.956522807016837, 4.804535190165164, 0.0), (-4.684348156017309, -0.8256996400848076, 0.0))]),
    ('arc', [((-4.851106780774236, -0.7152873664734379, 0.0), (-5.017865405531163, -0.6048750928620678, 0.0), 3.141592653589793)]),
    ('line', [((-5.017865405531164, -0.604875092862068, 0.0), (-1.1539074633188227, 5.230964451340308, 0.0))]),
    ('arc', [((-0.9871488385618923, 5.1205521777289436, 0.0), (-1.038934774834536, 5.3137296243919, 0.0), 0.7240398975936545)]),
    ('line', [((5.125413703463568, -1.8369640216010046, 0.0), (4.362275616964679, -4.751480902709178, 0.0))]),
    ('arc', [((4.168799788832837, -4.700821126458193, 0.0), (4.1535240161501985, -4.900235167513607, 0.0), 1.3911592165597284)]),
    ('line', [((4.153524016150199, -4.900235167513607, 0.0), (-2.977478522472553, -4.353976872233059, 0.0))]),
    ('arc', [((-2.962202749718357, -4.15456283094806, 0.0), (-2.946926976964161, -3.95514878966306, 0.0), 3.141592653589793)]),
    ('line', [((-2.946926976964161, -3.9551487896630597, 0.0), (3.693560597590318, -4.463832022477165, 0.0))]),
    ('arc', [((3.708836370344515, -4.264417981192163, 0.0), (3.6935605975903187, -4.463832022477164, 0.0), 1.5707963267948988)]),
    ('line', [((3.908250411629515, -4.279693753946359, 0.0), (3.954077729845263, -3.6814516296203283, 0.0))]),
    ('arc', [((3.754663688560264, -3.6661758568661296, 0.0), (3.9540777298452627, -3.6814516296203283, 0.0), 1.5707963267949145)]),
    ('line', [((3.769939461314459, -3.4667618155811306, 0.0), (-3.147680031006757, -2.9368493651773058, 0.0))]),
    ('arc', [((-3.002461302028344, -2.674342286763573, 0.0), (-3.1476800310067627, -2.411835208349844, 0.0), 2.131000334223934)]),
    ('line', [((-3.147680031006762, -2.411835208349844, 0.0), (-1.5178510053316665, -1.5130658730975757, 0.0))]),
    ('arc', [((-1.4441596982725928, -1.6505187164899955, 0.0), (-1.3602446682015836, -1.5190578454259502, 0.0), 1.0602503303189499)]),
    ('arc', [((-0.015526420367374087, -0.018911184783890412, 0.0), (-1.360244668201584, -1.51905784542595, 0.0), 1.476435944132634)]),
    ('arc', [((1.471708286216937, -1.798276799854161, 0.0), (1.5957740166026528, -1.5004677177222807, 0.0), 0.7773876618315776)]),
    ('line', [((1.5957740166026526, -1.5004677177222807, 0.0), (3.8152318530316225, -2.7800704198838395, 0.0))]),
    ('arc', [((3.915230989518013, -2.606866834865378, 0.0), (3.815231853031622, -2.78007041988384, 0.0), 1.5707963267949017)]),
    ('line', [((4.088434574536475, -2.7068659713517675, 0.0), (4.601406629291171, -1.8183723097617248, 0.0))]),
    ('arc', [((4.426320974698369, -1.7183011540986417, 0.0), (4.60140662929117, -1.8183723097617248, 0.0), 0.9619895521206652)]),
    ('line', [((4.608542010084632, -1.6319025609232134, 0.0), (1.6221870041016389, 4.596296307426082, 0.0))]),
    ('arc', [((1.8023741537880307, 4.683083537932007, 0.0), (1.9828649335509652, 4.76923753210269, 0.0), 3.1451040172352247)]),
    ('line', [((1.9828649335509652, 4.76923753210269, 0.0), (5.11227684063445, -1.699833633035654, 0.0))]),
    ('arc', [((4.9404486825357425, -1.7854889234679623, 0.0), (5.125413703463568, -1.8369640216010048, 0.0), 0.7338702624799877)]),
    ('circle', [((0.0, 0.0, 0.0), 0.9999913636483746)]),
]

profile_4_entities = [
    ('arc', [((0.7216868885630634, 0.9921052856543948, 0.0), (0.7579476805954032, 0.9515857069058391, 0.0), 3.5723130117946256)]),
    ('arc', [((0.890914295976129, 0.803002321356975, 0.0), (0.7579476805954032, 0.9515857069058391, 0.0), 1.5743545541007165)]),
    ('arc', [((0.8928682117083965, 0.8047634197951027, 0.0), (0.7428049754752626, 0.6695078553752708, 0.0), 1.5572676765952242)]),
    ('arc', [((1.0628193523518348, 0.6127967748068281, 0.0), (1.0794644367644686, 0.5610317048689898, 0.0), 3.5723130117946273)]),
    ('arc', [((1.1405011768086593, 0.3712116331385582, 0.0), (1.0794644367644686, 0.5610317048689898, 0.0), 1.5743545541007162)]),
    ('arc', [((1.1430024709173388, 0.37202574749137574, 0.0), (0.9508994888679655, 0.30949985794930773, 0.0), 1.557267676595224)]),
    ('arc', [((1.2201806947082758, 0.12753013451123255, 0.0), (1.2143319851904149, 0.07347022424726067, 0.0), 3.572313011794623)]),
    ('arc', [((1.1928850430430542, -0.12476491880133281, 0.0), (1.2143319851904149, 0.07347022424726067, 0.0), 1.5743545541007153)]),
    ('arc', [((1.195501219053211, -0.12503855630142427, 0.0), (0.9945748419847392, -0.10402347663403065, 0.0), 1.557267676595225)]),
    ('arc', [((1.1665617099560424, -0.37978762461625604, 0.0), (1.1392305015171824, -0.42679492560285387, 0.0), 3.5723130117946256)]),
    ('arc', [((1.0390082483149017, -0.5991684828267683, 0.0), (1.1392305015171824, -0.42679492560285387, 0.0), 1.5743545541007173)]),
    ('arc', [((1.0412869456271676, -0.6004825577700843, 0.0), (0.8662791694935665, -0.4995602070837268, 0.0), 1.5572676765952236)]),
    ('arc', [((0.91123360767198, -0.8214366531853394, 0.0), (0.8671457145474339, -0.8532633555060577, 0.0), 3.5723130117946225)]),
    ('arc', [((0.7054774883594943, -0.9699703728966738, 0.0), (0.8671457145474339, -0.8532633555060577, 0.0), 1.5743545541007153)]),
    ('arc', [((0.7070246995072628, -0.9720976697875188, 0.0), (0.5881959586977661, -0.8087184393666413, 0.0), 1.557267676595224)]),
    ('arc', [((0.4983449363239921, -1.1210518219009595, 0.0), (0.4451235557609289, -1.1321947995880326, 0.0), 3.5723130117946185)]),
    ('arc', [((0.2499632616049516, -1.173055573588544, 0.0), (0.4451235557609289, -1.1321947995880326, 0.0), 1.5743545541007162)]),
    ('arc', [((0.2505114597248015, -1.1756282634686053, 0.0), (0.20840832305059134, -0.9780419065066899, 0.0), 1.5572676765952242)]),
    ('arc', [((-0.000712101836032028, -1.2268269461738275, 0.0), (-0.053864509637195246, -1.2153594771543856, 0.0), 3.572313011794623)]),
    ('arc', [((-0.24877188392602897, -1.1733088087316255, 0.0), (-0.053864509637195246, -1.2153594771543856, 0.0), 1.5743545541007178)]),
    ('arc', [((-0.24931748726924322, -1.1758820501484872, 0.0), (-0.20741500498220722, -0.9782530427799498, 0.0), 1.5572676765952234)]),
    ('arc', [((-0.4996460111193641, -1.1204725460803275, 0.0), (-0.5435389119753403, -1.0883774599265184, 0.0), 3.5723130117946194)]),
    ('arc', [((-0.7044921107045834, -0.9706862916691122, 0.0), (-0.5435389119753403, -1.0883774599265184, 0.0), 1.5743545541007167)]),
    ('arc', [((-0.7060371757361692, -0.9728151478046341, 0.0), (-0.5873743943474165, -0.8093153408066629, 0.0), 1.5572676765952245)]),
    ('arc', [((-0.9121865859386464, -0.8203782635960194, 0.0), (-0.9392304985369515, -0.7732050922785401, 0.0), 3.5723130117946256)]),
    ('arc', [((-1.0383992514324127, -0.6002232963688912, 0.0), (-0.9392304985369515, -0.7732050922785401, 0.0), 1.5743545541007131)]),
    ('arc', [((-1.0406766223719335, -0.6015396686571906, 0.0), (-0.8657714148011059, -0.500439664008851, 0.0), 1.5572676765952258)]),
    ('arc', [((-1.1670018130941617, -0.37843312643340765, 0.0), (-1.1725205992603156, -0.32433853982785826, 0.0), 3.5723130117946242)]),
    ('arc', [((-1.1927577280265311, -0.12597624026902562, 0.0), (-1.1725205992603156, -0.32433853982785826, 0.0), 1.5743545541007171)]),
    ('arc', [((-1.1953736267492792, -0.126252515982589, 0.0), (-0.9944686923492994, -0.10503342295228713, 0.0), 1.5572676765952236)]),
    ('arc', [((-1.220031824887055, 0.12894653624656424, 0.0), (-1.2030712363563314, 0.18060909268219277, 0.0), 3.5723130117946296)]),
    ('arc', [((-1.1408775575810806, 0.370053252231568, 0.0), (-1.2030712363563314, 0.18060909268219277, 0.0), 1.5743545541007162)]),
    ('arc', [((-1.143379671433198, 0.37086484367350186, 0.0), (-0.9512132985258538, 0.30853405113141846, 0.0), 1.5572676765952247)]),
    ('arc', [((-1.062107250515803, 0.6140301713669988, 0.0), (-1.0255999271272735, 0.6543277722853953, 0.0), 3.572313011794626)]),
    ('arc', [((-0.8917292928826306, 0.8020971755930673, 0.0), (-1.0255999271272735, 0.6543277722853953, 0.0), 1.5743545541007171)]),
    ('arc', [((-0.8936849836480958, 0.8038563026571113, 0.0), (-0.7434844838857585, 0.6687531848306422, 0.0), 1.557267676595224)]),
    ('arc', [((-0.7205346835889122, 0.992942411569095, 0.0), (-0.6707930732150749, 1.0149072356792574, 0.0), 3.5723130117946256)]),
    ('arc', [((-0.4883929323384709, 1.0954512104704446, 0.0), (-0.6707930732150749, 1.0149072356792574, 0.0), 1.5743545541007153)]),
    ('arc', [((-0.4894640433170422, 1.0978537041060579, 0.0), (-0.40720044763732277, 0.9133388174406931, 0.0), 1.5572676765952234)]),
    ('arc', [((-0.25437512401739626, 1.200165888212275, 0.0), (-0.20000000298023118, 1.2000000178813932, 0.0), 3.57231301179464)]),
    ('arc', [((-0.0006089968824897485, 1.1993917791956594, 0.0), (-0.20000000298023118, 1.2000000178813932, 0.0), 1.5743545541007153)]),
    ('arc', [((-0.0006103232552343851, 1.2020222264272746, 0.0), (-0.0005077546924613419, 0.9999998710925778, 0.0), 1.5572676765952254)]),
    ('arc', [((0.2557682054221813, 1.1998697796187474, 0.0), (0.3053748847128813, 1.177601895333916, 0.0), 3.5723130117946345)]),
    ('arc', [((0.48728023966703776, 1.095946613165699, 0.0), (0.3053748847128813, 1.177601895333916, 0.0), 1.5743545541007156)]),
    ('arc', [((0.48834892724201706, 1.0983501857701075, 0.0), (0.4062727336515339, 0.9137518623189281, 0.0), 1.5572676765952247)]),
]

profile_5_entities = [
    ('line', [((0.9625795922197581, 1.1547469835402442, 0.0), (0.6657406423025521, 0.7461832195825535, 0.0))]),
    ('arc', [((-6.661338147750939e-16, -6.661338147750939e-16, 0.0), (0.916339363782756, 0.4004025104594298, 0.0), 0.43035431032311)]),
    ('line', [((0.916339363782756, 0.4004025104594298, 0.0), (1.396412073319922, 0.556387589411954, 0.0))]),
    ('line', [((1.396412073319922, 0.556387589411954, 0.0), (1.457486495598466, 0.36841984542278877, 0.0))]),
    ('line', [((1.457486495598466, 0.36841984542278877, 0.0), (0.9771909854475987, 0.21236237416253986, 0.0))]),
    ('arc', [((-9.992007221626409e-16, -1.3877787807814457e-17, 0.0), (0.9766848085439126, -0.2146783285744996, 0.0), 0.43035431032310895)]),
    ('line', [((0.9766848085439126, -0.2146783285744996, 0.0), (1.4567575180810781, -0.37066340752702404, 0.0))]),
    ('line', [((1.4567575180810781, -0.37066340752702404, 0.0), (1.395683095802534, -0.5586311515161893, 0.0))]),
    ('line', [((1.395683095802534, -0.5586311515161893, 0.0), (0.9153875856516668, -0.40257368025594115, 0.0))]),
    ('arc', [((-8.215650382226158e-15, 6.050715484207103e-15, 0.0), (0.6639698527369781, -0.7477593427409892, 0.0), 0.4303543103231058)]),
    ('line', [((0.6639698527369781, -0.7477593427409892, 0.0), (0.9606711043022025, -1.1561335811765332, 0.0))]),
    ('line', [((0.9606711043022025, -1.1561335811765332, 0.0), (0.8007761909337097, -1.272304035750476, 0.0))]),
    ('line', [((0.8007761909337097, -1.272304035750476, 0.0), (0.5039372410165035, -0.8637402717927851, 0.0))]),
    ('arc', [((-9.992007221626409e-16, 3.3306690738754696e-15, 0.0), (0.0976409806897805, -0.9952217033857016, 0.0), 0.43035431032310895)]),
    ('line', [((0.0976409806897805, -0.9952217033857016, 0.0), (0.09764098068978057, -1.5000000223517418, 0.0))]),
    ('line', [((0.09764098068978057, -1.5000000223517418, 0.0), (-0.1000000014901163, -1.5000000223517418, 0.0))]),
    ('line', [((-0.1000000014901163, -1.5000000223517418, 0.0), (-0.10000000149011623, -0.9949874369568575, 0.0))]),
    ('arc', [((9.992007221626409e-16, 2.886579864025407e-15, 0.0), (-0.505983427286041, -0.8625431996786431, 0.0), 0.43035431032310895)]),
    ('line', [((-0.505983427286041, -0.8625431996786431, 0.0), (-0.8026846788512653, -1.2709174381141872, 0.0))]),
    ('line', [((-0.8026846788512653, -1.2709174381141872, 0.0), (-0.962579592219758, -1.1547469835402442, 0.0))]),
    ('line', [((-0.962579592219758, -1.1547469835402442, 0.0), (-0.6657406423025521, -0.7461832195825535, 0.0))]),
    ('arc', [((5.551115123125783e-16, 5.551115123125783e-16, 0.0), (-0.9163393637827557, -0.40040251045943065, 0.0), 0.43035431032310895)]),
    ('line', [((-0.9163393637827557, -0.40040251045943065, 0.0), (-1.396412073319922, -0.5563875894119545, 0.0))]),
    ('line', [((-1.396412073319922, -0.5563875894119545, 0.0), (-1.457486495598466, -0.36841984542278927, 0.0))]),
    ('line', [((-1.457486495598466, -0.36841984542278927, 0.0), (-0.9771909854475989, -0.2123623741625402, 0.0))]),
    ('arc', [((5.662137425588298e-15, 1.942890293094024e-16, 0.0), (-0.9766848085439128, 0.21467832857449934, 0.0), 0.43035431032310684)]),
    ('line', [((-0.9766848085439128, 0.21467832857449934, 0.0), (-1.4567575180810786, 0.370663407527024, 0.0))]),
    ('line', [((-1.4567575180810786, 0.370663407527024, 0.0), (-1.3956830958025344, 0.5586311515161893, 0.0))]),
    ('line', [((-1.3956830958025344, 0.5586311515161893, 0.0), (-0.9153875856516667, 0.40257368025594076, 0.0))]),
    ('arc', [((9.992007221626409e-16, -8.881784197001252e-16, 0.0), (-0.6639698527369782, 0.7477593427409888, 0.0), 0.4303543103231098)]),
    ('line', [((-0.6639698527369782, 0.7477593427409888, 0.0), (-0.9606711043022024, 1.1561335811765328, 0.0))]),
    ('line', [((-0.9606711043022024, 1.1561335811765328, 0.0), (-0.8007761909337097, 1.2723040357504756, 0.0))]),
    ('line', [((-0.8007761909337097, 1.2723040357504756, 0.0), (-0.5039372410165035, 0.8637402717927851, 0.0))]),
    ('arc', [((8.326672684688674e-16, -2.7755575615628914e-15, 0.0), (-0.09764098068978039, 0.9952217033857018, 0.0), 0.43035431032310895)]),
    ('line', [((-0.09764098068978039, 0.9952217033857018, 0.0), (-0.09764098068978075, 1.5000000223517418, 0.0))]),
    ('line', [((-0.09764098068978075, 1.5000000223517418, 0.0), (0.10000000149011612, 1.5000000223517418, 0.0))]),
    ('line', [((0.10000000149011612, 1.5000000223517418, 0.0), (0.10000000149011623, 0.9949874369568577, 0.0))]),
    ('arc', [((5.273559366969494e-16, 1.7763568394002505e-15, 0.0), (0.505983427286041, 0.8625431996786432, 0.0), 0.4303543103231111)]),
    ('line', [((0.505983427286041, 0.8625431996786432, 0.0), (0.8026846788512654, 1.2709174381141872, 0.0))]),
    ('line', [((0.8026846788512654, 1.2709174381141872, 0.0), (0.9625795922197581, 1.1547469835402442, 0.0))]),
]

profile_6_entities = [
    ('arc', [((0.04959993499098768, 1.4000000223517415, 0.0), (0.149599934990988, 1.4000000223517417, 0.0), 1.5707963267948926)]),
    ('line', [((0.149599934990988, 1.4000000223517417, 0.0), (0.1495999349909879, 1.0713075526908669, 0.0))]),
    ('arc', [((0.24959993499098765, 1.0713075526908666, 0.0), (0.1495999349909879, 1.0713075526908669, 0.0), 1.341893576024854)]),
    ('arc', [((-1.1601830607332886e-14, -3.8191672047105385e-14, 0.0), (0.35302130610789173, 0.9356152828133355, 0.0), 0.1318956119982438)]),
    ('arc', [((0.388323436718681, 1.0291768110946689, 0.0), (0.35302130610789173, 0.9356152828133355, 0.0), 1.303276158845239)]),
    ('line', [((0.46922513615617567, 0.9703982858654218, 0.0), (0.6685593984686745, 1.2447583606428037, 0.0))]),
    ('arc', [((0.7494610979061692, 1.1859798354135567, 0.0), (0.8082396231354165, 1.266881534851051, 0.0), 1.570796326794902)]),
    ('line', [((0.8082396231354165, 1.266881534851051, 0.0), (0.9218050819043359, 1.1843713993429916, 0.0))]),
    ('arc', [((0.8630265566750879, 1.1034696999054967, 0.0), (0.9439282561125834, 1.0446911746762495, 0.0), 1.570796326794887)]),
    ('line', [((0.9439282561125834, 1.0446911746762495, 0.0), (0.7507276699063299, 0.77877338079753, 0.0))]),
    ('arc', [((0.8316293693438246, 0.7199948555682827, 0.0), (0.7507276699063299, 0.77877338079753, 0.0), 1.3418935760248494)]),
    ('arc', [((-4.518607710224387e-14, -3.397282455352979e-14, 0.0), (0.835541101074855, 0.5494279465176656, 0.0), 0.13189561199824126)]),
    ('arc', [((0.919095211182341, 0.6043707411694337, 0.0), (0.835541101074855, 0.5494279465176656, 0.0), 1.30327615884522)]),
    ('line', [((0.9499969106198356, 0.5092650895399169, 0.0), (1.272526522163846, 0.6140613129489139, 0.0))]),
    ('arc', [((1.3034282216013404, 0.5189556613193985, 0.0), (1.3985338732308559, 0.5498573607568932, 0.0), 1.5707963267948948)]),
    ('line', [((1.3985338732308559, 0.5498573607568932, 0.0), (1.441912018532608, 0.41635315708849396, 0.0))]),
    ('arc', [((1.346806366903092, 0.38545145765099964, 0.0), (1.3777080663405874, 0.2903458060214841, 0.0), 1.5707963267948861)]),
    ('line', [((1.3777080663405874, 0.2903458060214841, 0.0), (1.0651029512124652, 0.18877424697320136, 0.0))]),
    ('arc', [((1.0960046506499603, 0.09366859534368573, 0.0), (1.0651029512124652, 0.18877424697320136, 0.0), 1.3418935760248434)]),
    ('arc', [((-2.9976021664879227e-14, 3.469446951953614e-17, 0.0), (0.9989125944287349, -0.046622190978693634, 0.0), 0.13189561199824548)]),
    ('arc', [((1.0988038538716087, -0.051284410076562356, 0.0), (0.9989125944287349, -0.046622190978693634, 0.0), 1.3032761588452273)]),
    ('line', [((1.0679021544341136, -0.14639006170607793, 0.0), (1.3904317659781233, -0.25118628511507474, 0.0))]),
    ('arc', [((1.3595300665406285, -0.34629193674459063, 0.0), (1.4546357181701446, -0.377193636182085, 0.0), 1.5707963267948912)]),
    ('line', [((1.4546357181701446, -0.377193636182085, 0.0), (1.4112575728683918, -0.5106978398504842, 0.0))]),
    ('arc', [((1.3161519212388768, -0.4797961404129899, 0.0), (1.2852502218013822, -0.5749017920425048, 0.0), 1.5707963267949)]),
    ('line', [((1.2852502218013822, -0.5749017920425048, 0.0), (0.9726451066732598, -0.4733302329942232, 0.0))]),
    ('arc', [((0.9417434072357652, -0.5684358846237387, 0.0), (0.9726451066732598, -0.4733302329942232, 0.0), 1.341893576024846)]),
    ('arc', [((-4.218847493575595e-14, 2.930988785010413e-14, 0.0), (0.780733428501177, -0.6248642361511807, 0.0), 0.13189561199824296)]),
    ('arc', [((0.8588067713512952, -0.6873506597662983, 0.0), (0.780733428501177, -0.6248642361511807, 0.0), 1.30327615884523)]),
    ('line', [((0.7779050719138003, -0.7461291849955458, 0.0), (0.9772393342262989, -1.0204892597729267, 0.0))]),
    ('arc', [((0.8963376347888046, -1.0792677850021741, 0.0), (0.9551161600180514, -1.1601694844396688, 0.0), 1.570796326794903)]),
    ('line', [((0.9551161600180514, -1.1601694844396688, 0.0), (0.8415507012491319, -1.2426796199477281, 0.0))]),
    ('arc', [((0.7827721760198851, -1.1617779205102334, 0.0), (0.7018704765823904, -1.2205564457394806, 0.0), 1.570796326794893)]),
    ('line', [((0.7018704765823904, -1.2205564457394806, 0.0), (0.5086698903761364, -0.9546386518607617, 0.0))]),
    ('arc', [((0.42776819093864177, -1.0134171770900091, 0.0), (0.5086698903761364, -0.9546386518607617, 0.0), 1.341893576024848)]),
    ('arc', [((-2.4424906541753444e-14, 7.038813976123492e-14, 0.0), (0.26434062903940525, -0.9644293814681574, 0.0), 0.13189561199823874)]),
    ('arc', [((0.29077469194334615, -1.060872319614973, 0.0), (0.26434062903940525, -0.9644293814681574, 0.0), 1.3032761588452322)]),
    ('line', [((0.1907746919433461, -1.060872319614973, 0.0), (0.19077469194334618, -1.4000000223517417, 0.0))]),
    ('arc', [((0.09077469194334611, -1.4000000223517415, 0.0), (0.09077469194334621, -1.5000000223517416, 0.0), 1.5707963267948934)]),
    ('line', [((0.09077469194334621, -1.5000000223517416, 0.0), (-0.04959993499098757, -1.5000000223517418, 0.0))]),
    ('arc', [((-0.049599934990987325, -1.4000000223517417, 0.0), (-0.14959993499098742, -1.400000022351742, 0.0), 1.570796326794892)]),
    ('line', [((-0.14959993499098742, -1.400000022351742, 0.0), (-0.14959993499098817, -1.071307552690867, 0.0))]),
    ('arc', [((-0.24959993499098865, -1.0713075526908675, 0.0), (-0.14959993499098817, -1.071307552690867, 0.0), 1.3418935760248392)]),
    ('arc', [((1.887379141862766e-15, 6.5503158452884236e-15, 0.0), (-0.35302130610789184, -0.9356152828133361, 0.0), 0.131895611998248)]),
    ('arc', [((-0.3883234367186806, -1.0291768110946702, 0.0), (-0.35302130610789184, -0.9356152828133361, 0.0), 1.3032761588452302)]),
    ('line', [((-0.46922513615617567, -0.9703982858654226, 0.0), (-0.6685593984686742, -1.244758360642804, 0.0))]),
    ('arc', [((-0.7494610979061688, -1.185979835413557, 0.0), (-0.8082396231354162, -1.2668815348510514, 0.0), 1.5707963267948992)]),
    ('line', [((-0.8082396231354162, -1.2668815348510514, 0.0), (-0.9218050819043356, -1.1843713993429916, 0.0))]),
    ('arc', [((-0.8630265566750882, -1.1034696999054974, 0.0), (-0.9439282561125826, -1.04469117467625, 0.0), 1.570796326794896)]),
    ('line', [((-0.9439282561125826, -1.04469117467625, 0.0), (-0.7507276699063298, -0.7787733807975303, 0.0))]),
    ('arc', [((-0.8316293693438243, -0.719994855568283, 0.0), (-0.7507276699063298, -0.7787733807975303, 0.0), 1.3418935760248505)]),
    ('arc', [((-2.6645352591003757e-15, -2.6645352591003757e-15, 0.0), (-0.8355411010748548, -0.5494279465176659, 0.0), 0.1318956119982497)]),
    ('arc', [((-0.9190952111823403, -0.6043707411694329, 0.0), (-0.8355411010748548, -0.5494279465176659, 0.0), 1.3032761588452324)]),
    ('line', [((-0.949996910619835, -0.5092650895399174, 0.0), (-1.2725265221638455, -0.6140613129489145, 0.0))]),
    ('arc', [((-1.3034282216013402, -0.5189556613193996, 0.0), (-1.3985338732308552, -0.5498573607568942, 0.0), 1.5707963267948981)]),
    ('line', [((-1.3985338732308552, -0.5498573607568942, 0.0), (-1.441912018532608, -0.41635315708849435, 0.0))]),
    ('arc', [((-1.3468063669030919, -0.385451457651, 0.0), (-1.3777080663405874, -0.29034580602148424, 0.0), 1.5707963267948843)]),
    ('line', [((-1.3777080663405874, -0.29034580602148424, 0.0), (-1.065102951212465, -0.188774246973202, 0.0))]),
    ('arc', [((-1.0960046506499597, -0.0936685953436869, 0.0), (-1.065102951212465, -0.188774246973202, 0.0), 1.3418935760248514)]),
    ('arc', [((1.0547118733938987e-14, 1.8041124150158794e-16, 0.0), (-0.998912594428735, 0.046622190978691955, 0.0), 0.131895611998248)]),
    ('arc', [((-1.0988038538716096, 0.05128441007656108, 0.0), (-0.998912594428735, 0.046622190978691955, 0.0), 1.3032761588452266)]),
    ('line', [((-1.0679021544341138, 0.14639006170607732, 0.0), (-1.3904317659781242, 0.25118628511507407, 0.0))]),
    ('arc', [((-1.3595300665406294, 0.3462919367445897, 0.0), (-1.454635718170145, 0.37719363618208424, 0.0), 1.5707963267948932)]),
    ('line', [((-1.454635718170145, 0.37719363618208424, 0.0), (-1.4112575728683925, 0.510697839850484, 0.0))]),
    ('arc', [((-1.316151921238877, 0.47979614041298957, 0.0), (-1.2852502218013826, 0.5749017920425048, 0.0), 1.5707963267948974)]),
    ('line', [((-1.2852502218013826, 0.5749017920425048, 0.0), (-0.9726451066732604, 0.4733302329942226, 0.0))]),
    ('arc', [((-0.9417434072357658, 0.5684358846237384, 0.0), (-0.9726451066732604, 0.4733302329942226, 0.0), 1.3418935760248478)]),
    ('arc', [((5.850875339774575e-14, -4.0190073491430667e-14, 0.0), (-0.7807334285011778, 0.6248642361511796, 0.0), 0.13189561199823874)]),
    ('arc', [((-0.8588067713512962, 0.6873506597662975, 0.0), (-0.7807334285011778, 0.6248642361511796, 0.0), 1.303276158845227)]),
    ('line', [((-0.7779050719138008, 0.7461291849955449, 0.0), (-0.9772393342262993, 1.020489259772926, 0.0))]),
    ('arc', [((-0.8963376347888048, 1.0792677850021735, 0.0), (-0.9551161600180518, 1.1601694844396682, 0.0), 1.5707963267949017)]),
    ('line', [((-0.9551161600180518, 1.1601694844396682, 0.0), (-0.8415507012491322, 1.2426796199477277, 0.0))]),
    ('arc', [((-0.7827721760198847, 1.161777920510233, 0.0), (-0.70187047658239, 1.2205564457394804, 0.0), 1.5707963267948974)]),
    ('line', [((-0.70187047658239, 1.2205564457394804, 0.0), (-0.5086698903761367, 0.9546386518607609, 0.0))]),
    ('arc', [((-0.4277681909386419, 1.0134171770900084, 0.0), (-0.5086698903761367, 0.9546386518607609, 0.0), 1.3418935760248483)]),
    ('arc', [((-3.6637359812630166e-15, 1.27675647831893e-14, 0.0), (-0.2643406290394052, 0.9644293814681566, 0.0), 0.1318956119982514)]),
    ('arc', [((-0.2907746919433466, 1.0608723196149723, 0.0), (-0.2643406290394052, 0.9644293814681566, 0.0), 1.3032761588452253)]),
    ('line', [((-0.1907746919433463, 1.060872319614972, 0.0), (-0.19077469194334623, 1.4000000223517417, 0.0))]),
    ('arc', [((-0.09077469194334592, 1.4000000223517415, 0.0), (-0.09077469194334607, 1.5000000223517418, 0.0), 1.5707963267948928)]),
    ('line', [((-0.09077469194334607, 1.5000000223517418, 0.0), (0.04959993499098786, 1.5000000223517418, 0.0))]),
]

profile_7_entities = [
    ('line', [((-0.9329189491739123, -0.3600864261149581, 0.0), (-0.6063501391370066, -1.2061672805911015, 0.0))]),
    ('arc', [((2.7755575615628914e-15, 3.552713678800501e-15, 0.0), (-1.0486252666842892, -0.8502264698721773, 0.0), 0.423692196770822)]),
    ('line', [((-1.0486252666842892, -0.8502264698721773, 0.0), (-1.0000000000000002, 3.3306690738754696e-16, 0.0))]),
    ('arc', [((6.328271240363392e-15, -1.1657341758564144e-15, 0.0), (-0.9142928689774174, 0.405053761539186, 0.0), 0.41703763107718717)]),
    ('line', [((-0.9142928689774174, 0.405053761539186, 0.0), (-1.2816433585084892, -0.42413476819412055, 0.0))]),
    ('arc', [((4.6629367034256575e-15, 6.661338147750939e-16, 0.0), (-1.3426909393869293, 0.1402891346050955, 0.0), 0.4236921967708209)]),
    ('line', [((-1.3426909393869293, 0.1402891346050955, 0.0), (-0.7071067811865479, 0.7071067811865474, 0.0))]),
    ('arc', [((1.1102230246251565e-16, 3.3306690738754696e-16, 0.0), (-0.3600864261149589, 0.9329189491739123, 0.0), 0.4170376310771899)]),
    ('line', [((-0.3600864261149589, 0.9329189491739123, 0.0), (-1.206167280591101, 0.6063501391370071, 0.0))]),
    ('arc', [((2.220446049250313e-15, -1.9984014443252818e-15, 0.0), (-0.8502264698721776, 1.0486252666842883, 0.0), 0.4236921967708214)]),
    ('line', [((-0.8502264698721776, 1.0486252666842883, 0.0), (2.220446049250313e-16, 1.0, 0.0))]),
    ('arc', [((-6.661338147750939e-16, -3.3306690738754696e-15, 0.0), (0.40505376153918504, 0.9142928689774175, 0.0), 0.4170376310771877)]),
    ('line', [((0.40505376153918504, 0.9142928689774175, 0.0), (-0.42413476819412044, 1.2816433585084892, 0.0))]),
    ('arc', [((1.8318679906315083e-15, -1.4210854715202004e-14, 0.0), (0.14028913460509557, 1.3426909393869293, 0.0), 0.4236921967708182)]),
    ('line', [((0.14028913460509557, 1.3426909393869293, 0.0), (0.7071067811865477, 0.7071067811865475, 0.0))]),
    ('arc', [((-6.772360450213455e-15, -4.551914400963142e-15, 0.0), (0.9329189491739124, 0.36008642611495834, 0.0), 0.41703763107718633)]),
    ('line', [((0.9329189491739124, 0.36008642611495834, 0.0), (0.606350139137007, 1.2061672805911012, 0.0))]),
    ('arc', [((-1.9984014443252818e-15, -1.7763568394002505e-15, 0.0), (1.0486252666842892, 0.850226469872177, 0.0), 0.42369219677082276)]),
    ('line', [((1.0486252666842892, 0.850226469872177, 0.0), (1.0, -4.440892098500626e-16, 0.0))]),
    ('arc', [((3.1086244689504383e-15, -6.522560269672795e-16, 0.0), (0.914292868977417, -0.405053761539186, 0.0), 0.4170376310771913)]),
    ('line', [((0.914292868977417, -0.405053761539186, 0.0), (1.281643358508489, 0.4241347681941207, 0.0))]),
    ('arc', [((-2.4424906541753444e-15, 1.6653345369377348e-16, 0.0), (1.3426909393869286, -0.1402891346050953, 0.0), 0.423692196770822)]),
    ('line', [((1.3426909393869286, -0.1402891346050953, 0.0), (0.7071067811865472, -0.7071067811865479, 0.0))]),
    ('arc', [((-2.55351295663786e-15, 3.774758283725532e-15, 0.0), (0.360086426114958, -0.9329189491739125, 0.0), 0.4170376310771877)]),
    ('line', [((0.360086426114958, -0.9329189491739125, 0.0), (1.206167280591101, -0.6063501391370071, 0.0))]),
    ('arc', [((-2.220446049250313e-15, 1.9984014443252818e-15, 0.0), (0.8502264698721776, -1.0486252666842883, 0.0), 0.4236921967708214)]),
    ('line', [((0.8502264698721776, -1.0486252666842883, 0.0), (0.0, -1.0, 0.0))]),
    ('arc', [((5.689893001203927e-16, 2.886579864025407e-15, 0.0), (-0.40505376153918554, -0.9142928689774172, 0.0), 0.4170376310771888)]),
    ('line', [((-0.40505376153918554, -0.9142928689774172, 0.0), (0.42413476819412055, -1.2816433585084892, 0.0))]),
    ('arc', [((-6.661338147750939e-16, 4.6629367034256575e-15, 0.0), (-0.1402891346050955, -1.3426909393869293, 0.0), 0.4236921967708209)]),
    ('line', [((-0.1402891346050955, -1.3426909393869293, 0.0), (-0.7071067811865478, -0.7071067811865472, 0.0))]),
    ('arc', [((1.4432899320127035e-15, 1.3322676295501878e-15, 0.0), (-0.9329189491739123, -0.3600864261149581, 0.0), 0.41703763107718933)]),
]

#TODO: Add additional profile entities here:
# profile_2_entities = []


# The goal is to have a library of predefined flexture profiles that can be centered and scaled to fit on an extruded-cut profile. 
profiles = {
    'Circular': {
        '1st Flexure': profile_1_entities,
        '2nd Flexure': profile_2_entities,
        '3rd Flexure': profile_3_entities,
        '4th Flexure': profile_4_entities,
        '5th Flexure': profile_5_entities,
        '6th Flexure': profile_6_entities,
        '7th Flexure': profile_7_entities
        # Add more circular profiles here
    },
    'Triangular': {
        # Define triangular profiles here
    },
    'Square': {
        # Define square profiles here
    },
    # Additional categories and profiles can be added here
}

def calculateProfileCentroid(loop):
    """Calculate the centroid of a profile that may include lines, arcs, and circles."""
    
    centroid_x = centroid_y = centroid_z = 0
    total_length = 0  # Use total arc length for arcs and circles, and total length for lines
    
    for edge in loop.edges:
        geom = edge.geometry
        
        if isinstance(geom, adsk.core.Line3D):
            # Handle lines
            startPoint = geom.startPoint
            endPoint = geom.endPoint
            edge_length = startPoint.distanceTo(endPoint)
            centroid_x += (startPoint.x + endPoint.x) / 2 * edge_length
            centroid_y += (startPoint.y + endPoint.y) / 2 * edge_length
            centroid_z += (startPoint.z + endPoint.z) / 2 * edge_length
            total_length += edge_length
            
        elif isinstance(geom, adsk.core.Arc3D):
            # Handle arcs
            center = geom.center
            radius = geom.radius
            startAngle = geom.startAngle
            endAngle = geom.endAngle
            arc_length = radius * abs(endAngle - startAngle)
            # Approximation: Centroid of arc segment as the midpoint of the chord for simplicity
            startPoint = geom.startPoint
            endPoint = geom.endPoint
            centroid_x += (startPoint.x + endPoint.x) / 2 * arc_length
            centroid_y += (startPoint.y + endPoint.y) / 2 * arc_length
            centroid_z += (startPoint.z + endPoint.z) / 2 * arc_length
            total_length += arc_length
            
        elif isinstance(geom, adsk.core.Circle3D):
            # Handle circles
            center = geom.center
            circumference = 2 * math.pi * geom.radius
            centroid_x += center.x * circumference
            centroid_y += center.y * circumference
            centroid_z += center.z * circumference
            total_length += circumference

    # Calculate the weighted average of centroids
    if total_length == 0:
        return None  # Avoid division by zero
    
    centroid = adsk.core.Point3D.create(centroid_x / total_length, centroid_y / total_length, centroid_z / total_length)
    return centroid

def scaleEntity(entity, scaleFactor, center):
    """Scales a given sketch entity around a center point by the scaleFactor."""
    if isinstance(entity, adsk.fusion.SketchLine):
        # Scale line end points
        start = entity.startSketchPoint.geometry.copy()
        end = entity.endSketchPoint.geometry.copy()
        entity.startSketchPoint.move(adsk.core.Vector3D.create((start.x - center.x) * scaleFactor + center.x - start.x,
                                                              (start.y - center.y) * scaleFactor + center.y - start.y,
                                                              (start.z - center.z) * scaleFactor + center.z - start.z))
        entity.endSketchPoint.move(adsk.core.Vector3D.create((end.x - center.x) * scaleFactor + center.x - end.x,
                                                            (end.y - center.y) * scaleFactor + center.y - end.y,
                                                            (end.z - center.z) * scaleFactor + center.z - end.z))
    elif isinstance(entity, adsk.fusion.SketchCircle):
        # Scale circle radius and center
        centerPoint = entity.centerSketchPoint.geometry.copy()
        entity.centerSketchPoint.move(adsk.core.Vector3D.create((centerPoint.x - center.x) * scaleFactor + center.x - centerPoint.x,
                                                                (centerPoint.y - center.y) * scaleFactor + center.y - centerPoint.y,
                                                                (centerPoint.z - center.z) * scaleFactor + center.z - centerPoint.z))
        entity.radius = entity.radius * scaleFactor
    elif type(entity) == adsk.fusion.SketchArc:
            scaleArc(entity, scaleFactor, centerPoint)

# Handlers to store event references and prevent garbage collection
global handlers 
handlers = []

class ProfileCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        """
        Initializes the command inputs such as dropdown menus and selection inputs,
        and attaches the appropriate event handlers.
        
        Parameters:
            args (adsk.core.CommandEventArgs): Arguments containing details about the command creation event.
        """
        try:
            cmd = adsk.core.Command.cast(args.command)
            inputs = cmd.commandInputs

           
            
            # Initialize profile input to None initially
            prof_input = None
            
            # Add a dropdown for selecting the profile category
            if not inputs.itemById('category'):
                cat_input = inputs.addDropDownCommandInput('category', 'Profile Category', adsk.core.DropDownStyles.TextListDropDownStyle)
                for cat in profiles.keys():
                    cat_input.listItems.add(cat, False)

            # Add a dropdown for selecting a specific profile (initially disabled)
            if not inputs.itemById('profile'):
                prof_input = inputs.addDropDownCommandInput('profile', 'Profile', adsk.core.DropDownStyles.TextListDropDownStyle)
                prof_input.isEnabled = False

            # Add a selection input for choosing the planar entity (e.g., face)
            if not inputs.itemById('plane'):
                plane_input = inputs.addSelectionInput('plane', 'Select Planar Entity', 'Select a planar face')
                plane_input.addSelectionFilter('PlanarFaces')

            # Add a selection input for choosing the edge of the profile
            if not inputs.itemById('edge'):
                edge_input = inputs.addSelectionInput('edge', 'Select Edge', 'Select an edge of the profile to center the sketch')
                edge_input.addSelectionFilter('Edges')

            if not inputs.itemById('fitType'):
                # Creating radio button group for fit settings
                fitGroup = inputs.addRadioButtonGroupCommandInput('fitType', 'Fit Type')
                fitGroup.listItems.add('Tight', True)
                fitGroup.listItems.add('Normal', False)
                fitGroup.listItems.add('Loose', False)
                
            # Attach input change event handler to dynamically update available profiles
            if prof_input is not None:
                inputChangedHandler = ProfileInputChangedHandler(prof_input)
                if inputChangedHandler not in handlers:
                    cmd.inputChanged.add(inputChangedHandler)
                    handlers.append(inputChangedHandler)

            # Attach the execution handler to execute the profile scaling and centering logic
            executeHandler = ProfileCommandExecuteHandler()
            if executeHandler not in handlers:
                cmd.execute.add(executeHandler)
                handlers.append(executeHandler)

        except Exception as e:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))
            
    def addInputsToCommand(cmd):
        inputs = cmd.commandInputs
        
        # Other inputs setup like dropdowns and selection inputs
        # ...

        # Add an OK button
        okBtn = inputs.addButtonCommandInput('ok_button_id', 'OK', adsk.core.ButtonRowCommandInput.iconNameEnum.kAcceptIcon)
        okBtn.isPromotion = True  # Optional: Promote the button for easier access



class ProfileInputChangedHandler(adsk.core.InputChangedEventHandler):
    def __init__(self, profile_input):
        """
        Initializes the handler with a reference to the profile dropdown input.

        Parameters:
            profile_input (adsk.core.DropDownCommandInput): The dropdown input for selecting profiles.
        """
        super().__init__()
        self.profile_input = profile_input

    def notify(self, args):
        """
        Updates the profile dropdown options based on the selected category.

        Parameters:
            args (adsk.core.InputChangedEventArgs): Arguments containing details about the input change event.
        """
        eventArgs = adsk.core.InputChangedEventArgs.cast(args)
        changed_input = eventArgs.input

        # If the category input changes, update the profiles list
        if changed_input.id == 'category':
            self.profile_input.listItems.clear()
            selected_category = changed_input.selectedItem.name

            # Populate the profiles dropdown with available profiles in the selected category
            for profile in profiles[selected_category].keys():
                self.profile_input.listItems.add(profile, False)
            self.profile_input.isEnabled = True
            if self.profile_input.listItems.count > 0:
                # Select the first available profile by default
                self.profile_input.listItems.item(0).isSelected = True


# Add a button to manually terminate the command and cleanup
def add_termination_button(inputs):
    btnInput = inputs.addButtonCommandInput('terminateBtn', 'Terminate', 'Terminate and clean up the script')
    btnInput.isPromoted = True  # Optionally promote the button for easier access


class ProfileCommandExecuteHandler(adsk.core.CommandEventHandler):
    """Handler for the 'CommandExecute' event to scale and center the selected sketch profile."""

    def __init__(self):
        super().__init__()

    def notify(self, args):
        """
        Scales and centers the selected predefined sketch profile onto the selected planar face.

        Parameters:
            args (adsk.core.CommandEventArgs): Arguments containing details about the command execution event.
        """
        try:
            # ui.messageBox('Execute handler called')  # Troubleshooting
            
            # Cast the event args and retrieve command inputs
            eventArgs = adsk.core.CommandEventArgs.cast(args)
            inputs = eventArgs.command.commandInputs

            # Retrieve the selected profile category and profile name
            category_input = inputs.itemById('category')
            profile_name_input = inputs.itemById('profile')
            selected_category = category_input.selectedItem.name
            # ui.messageBox(selected_category)  # Troubleshooting
            selected_profile = profile_name_input.selectedItem.name
            # ui.messageBox(selected_profile) # Troubleshooting

            # Retrieve the selected planar entity and edge for centering
            plane_input = inputs.itemById('plane')
            selected_entity = plane_input.selection(0).entity
            edge_input = inputs.itemById('edge')
            try: 
                selected_edge = adsk.fusion.BRepEdge.cast(edge_input.selection(0).entity)
            
                # This values corresponds to the inner radiues of the profile. A value of 1 = 1cm = 10mm. This should match the inner radius of the sketch profile in centimeters.
                standardDiameter = 1.0  # default scale factor for 'Normal' # Set your standard diameter: # The next two lines expect the profile to have been drawn witn a radius of 10mm = 1cm 
                # Determine the scale factor using the selected edge's diameter
                # Determine the scale factor modification based on the radio button selection
                fitTypeInput = inputs.itemById('fitType').selectedItem.name
                if fitTypeInput == 'Tight':
                    standardDiameter *= 1.02  # decrease scale by 0.99%
                elif fitTypeInput == 'Loose':
                    standardDiameter *= 0.98  # increase scale by 5%
                    
                scaleFactor = calculateScaleFactor(selected_edge, standardDiameter)
                
                # Find the loop containing the selected edge
                face = selected_edge.faces.item(0)
                loop = next((l for l in face.loops if selected_edge in l.edges), None)
                if not loop:
                    ui.messageBox('Failed to identify the loop containing the selected edge.')
                    return

                # Calculate the centroid of the selected profile loop
                profile_centroid = calculateProfileCentroid(loop)
                if not profile_centroid:
                    ui.messageBox('Failed to calculate the profile centroid.')
                    return

                # Create a new sketch on the selected planar entity and add the scaled profile
                design = app.activeProduct
                root_comp = design.rootComponent
                sketch = root_comp.sketches.add(selected_entity)

                # Offset the sketch to the profile's centroid and scale it
                offsetX, offsetY = profile_centroid.x, profile_centroid.y
                addScaledSketchEntities(sketch, profiles[selected_category][selected_profile], offsetX, offsetY, scaleFactor)

                # Notify the user of success
                ui.messageBox('Sketch successfully scaled and centered on the selected profile.')
            except:
                    pass
        except Exception as e:
            ui.messageBox('Execution Failed:\n{}'.format(traceback.format_exc()))

# Function to create and execute the command for adding the sketch
def run(context):
    # Check for an existing command definition and create if it doesn't exist
    cmdDef = ui.commandDefinitions.itemById('createProfile')
    if not cmdDef:
        cmdDef = ui.commandDefinitions.addButtonDefinition('createProfile', 'Create Sketch Profile', 'Creates a scaled sketch profile on selected face')

    # Connect to the command created event
    onCommandCreated = ProfileCommandCreatedHandler()
    cmdDef.commandCreated.add(onCommandCreated)
    handlers.append(onCommandCreated)

    # Execute the command
    cmdDef.execute()

    # Keep the script running to listen for events
    adsk.autoTerminate(False)

# Initialize the application and user interface
app = adsk.core.Application.get()
ui = app.userInterface

run(adsk.fusion.Design.cast(app.activeProduct))
